# Dicominator Docker Composition
# ==============================
#
# Set of composed services that make the Dicominator possible.

---

# Services
# --------
#
# The following services collectively enable the Dicominator application.

services:
    # Database
    # ~~~~~~~~
    #
    # PostgreSQL on port 5432, not published to host
    db:
        image: postgres:16.2-alpine3.19
        volumes:
            -   "db_vol:/var/lib/postgresql/data"
        networks:
            -   mainbus
        environment:
            POSTGRES_PASSWORD:
        restart:
            on-failure
        stop_grace_period: 13s


    # Static Data
    # ~~~~~~~~~~~
    #
    # This "service" is used to gather the static data from the Dicomonator image so it can be
    # served by the HTTPS proxy frontend.
    static_initializer:
        image: edrndocker/dicominator:${DICOMINATOR_VERSION:-latest}
        entrypoint: /bin/sh
        command: ['-c', 'cp -aRL /app/static/* /mnt/volume']
        user: root
        volumes:
            -   static:/mnt/volume


    # The Dicominator
    # ~~~~~~~~~~~~~~~
    #
    # The actual application; listens publicly but also available via `tls` service and profile.
    app:
        image: edrndocker/dicominator:${DICOMINATOR_VERSION:-latest}
        volumes:
            -   media:/app/media
            -   static:/app/static
            -   labcas_data_vol:/mnt/data
        networks:
            -   mainbus
        environment:
            # These 4 must be provided in .env or by host
            LDAP_URI:
            LDAP_BIND_PASSWORD:
            POSTGRES_PASSWORD:
            SIGNING_KEY:
            # The rest are fine or have fine defaults
            ALLOWED_HOSTS: ${ALLOWED_HOSTS:-.jpl.nasa.gov}
            DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@db/dicominator
            DJANGO_SETTINGS_MODULE: jpl.labcas.dicominator.policy.settings.ops
            FORCE_SCRIPT_NAME: /dicominator
            MEDIA_ROOT: /app/media
            MEDIA_URL: /dicominator/media/
            STATIC_ROOT: /app/static
            STATIC_URL: /dicominator/static/
        depends_on:
            -   static_initializer
            -   db
        restart: unless-stopped
        stop_grace_period: 13s
        healthcheck:
            disable: true
            test: ['NONE']


    # HTTPS proxy frontend
    # ~~~~~~~~~~~~~~~~~~~~
    #
    # JPL requires that our front-end web servers reverse-proxy to a TLS-enabled service
    # even if it's localhost.
    tls:
        image: edrndocker/proxycrypt:latest
        environment:
            PROXY_URL: http://app:8000/
            CERT_CN: ${CERT_CN:-edrn-docker.jpl.nasa.gov}
            PROXY_PATH: /dicominator/
            PROXY_PORT: ${HTTPS_PORT:-2371}
            PROXY_REDIRECT: default
        volumes:
            -   media:/app/media
            -   static:/app/static
        ports:
            -
                target: 443
                published: ${HTTPS_PORT:-2371}
                protocol: tcp
                mode: host
        depends_on:
            -   static_initializer
            -   app
        networks:
            -   mainbus
            -   default


# Networks
# --------
#
# Thankfully, this is also pretty simple.

networks:
    mainbus:
        driver: bridge
        external: false
        labels:
            org.label-schema.name: Mainbus Network
            org.label-schema.description: >
                Internal bridge network so the services that comprise the dicominator may communicate.


# Volumes
# -------
#
# For persistent data across composition existence.

volumes:
    # Media are things like images, PDFs, etc., that users upload while editing the site
    # and can be served by the site.
    media:
        driver: local
        driver_opts:
            type: none
            device: ${DATA_DIR:-/usr/local/labcas/dicominator/ops/dockerdata}/media
            o: bind
        labels:
            org.label-schema.name: Wagtail user media volume

    # Static resources are things that support the display of the site, such as CSS files
    # and JavaScript. They don't need to be persisted anywhere special.
    static:
        driver: local
        labels:
            org.label-schema.name: Wagtail and Django static resources volume

    # The database volume cannot be called "database"; it causes a bizarre error. But
    # calling it "db_vol" is fine. And we persist it specially for backups and
    # exports.
    db_vol:
        driver: local
        driver_opts:
            type: none
            device: ${DATA_DIR:-/usr/local/labcas/dicominator/ops/dockerdata}/postgresql
            o: bind
        labels:
            org.label-schema.name: PostgreSQL database volume

    # LabCAS data volume
    labcas_data_vol:
        driver: local
        driver_opts:
            type: none
            device: /labcas-data
            o: bind
        labels:
            org.label-schema.name: DICOM data volume


...

# -*- mode: YAML; tab-width: 4 -*-
